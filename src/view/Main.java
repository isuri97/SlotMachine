/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Reel;
import model.Symbol;

/**
 *
 * @author isuri
 */
public class Main extends javax.swing.JFrame {

    boolean toSpinReel, isNotSpin, is1stBetOne, is1stBetMax;
    int credit, bet, reel1Val, reel2Val, reel3Val;
    int wins, losses;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        resetReels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reel1 = new javax.swing.JButton();
        reel2 = new javax.swing.JButton();
        reel3 = new javax.swing.JButton();
        jBSpin = new javax.swing.JButton();
        jLCreditArea = new javax.swing.JLabel();
        jLBetArea = new javax.swing.JLabel();
        jBStat = new javax.swing.JButton();
        jBAddCoin = new javax.swing.JButton();
        jBBetOne = new javax.swing.JButton();
        jBBetMax = new javax.swing.JButton();
        jBReset = new javax.swing.JButton();
        jLCreditA = new javax.swing.JLabel();
        jLBetA = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 411));
        setPreferredSize(new java.awt.Dimension(530, 430));
        getContentPane().setLayout(null);

        reel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reel1ActionPerformed(evt);
            }
        });
        getContentPane().add(reel1);
        reel1.setBounds(10, 38, 150, 150);

        reel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reel2ActionPerformed(evt);
            }
        });
        getContentPane().add(reel2);
        reel2.setBounds(180, 40, 150, 150);

        reel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reel3ActionPerformed(evt);
            }
        });
        getContentPane().add(reel3);
        reel3.setBounds(350, 40, 150, 150);

        jBSpin.setText("Spin");
        jBSpin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSpinActionPerformed(evt);
            }
        });
        getContentPane().add(jBSpin);
        jBSpin.setBounds(390, 230, 110, 30);

        jLCreditArea.setText("Credit Area :");
        getContentPane().add(jLCreditArea);
        jLCreditArea.setBounds(30, 230, 70, 20);

        jLBetArea.setText("Bet Area     :");
        getContentPane().add(jLBetArea);
        jLBetArea.setBounds(30, 250, 70, 20);

        jBStat.setText("Statictics");
        jBStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStatActionPerformed(evt);
            }
        });
        getContentPane().add(jBStat);
        jBStat.setBounds(260, 310, 110, 30);

        jBAddCoin.setText("Add Coin");
        jBAddCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddCoinActionPerformed(evt);
            }
        });
        getContentPane().add(jBAddCoin);
        jBAddCoin.setBounds(390, 270, 110, 30);

        jBBetOne.setText("Bet One");
        jBBetOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBetOneActionPerformed(evt);
            }
        });
        getContentPane().add(jBBetOne);
        jBBetOne.setBounds(390, 310, 110, 30);

        jBBetMax.setText("Bet Max");
        jBBetMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBetMaxActionPerformed(evt);
            }
        });
        getContentPane().add(jBBetMax);
        jBBetMax.setBounds(390, 350, 110, 30);

        jBReset.setText("Reset");
        jBReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResetActionPerformed(evt);
            }
        });
        getContentPane().add(jBReset);
        jBReset.setBounds(260, 350, 110, 30);
        getContentPane().add(jLCreditA);
        jLCreditA.setBounds(100, 230, 130, 20);
        getContentPane().add(jLBetA);
        jLBetA.setBounds(100, 250, 130, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSpinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSpinActionPerformed
        if (bet == 0) {
            JOptionPane.showMessageDialog(this, "Add a bet 1st!");
        } else if (isNotSpin) {
            Thread thread1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    Reel reel = new Reel();
                    ArrayList<Symbol> spin = reel.spin();
                    toSpinReel = true;
                    while (toSpinReel) {
                        for (Symbol symbol : spin) {
                            reel1Val = symbol.getValue();
                            reel1.setIcon(symbol.getImage());
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (!toSpinReel) {
                                break;
                            }
                        }
                    }
                }
            });
            Thread thread2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    Reel reel = new Reel();
                    ArrayList<Symbol> spin = reel.spin();
                    toSpinReel = true;
                    while (toSpinReel) {
                        for (Symbol symbol : spin) {
                            reel2Val = symbol.getValue();
                            reel2.setIcon(symbol.getImage());
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (!toSpinReel) {
                                break;
                            }
                        }
                    }
                }
            });
            Thread thread3 = new Thread(new Runnable() {
                @Override
                public void run() {
                    Reel reel = new Reel();
                    ArrayList<Symbol> spin = reel.spin();
                    toSpinReel = true;
                    while (toSpinReel) {
                        for (Symbol symbol : spin) {
                            reel3Val = symbol.getValue();
                            reel3.setIcon(symbol.getImage());
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (!toSpinReel) {
                                break;
                            }
                        }
                    }
                }
            });
            thread1.start();
            thread2.start();
            thread3.start();
            isNotSpin = false;
        }
    }//GEN-LAST:event_jBSpinActionPerformed

    private void reel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reel1ActionPerformed
        stopSpin();
    }//GEN-LAST:event_reel1ActionPerformed

    private void reel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reel2ActionPerformed
        stopSpin();
    }//GEN-LAST:event_reel2ActionPerformed

    private void reel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reel3ActionPerformed
        stopSpin();
    }//GEN-LAST:event_reel3ActionPerformed

    private void jBBetOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBetOneActionPerformed

        if (credit >= 1) {
            if (bet == 3) {
                credit += 2;
                jLCreditA.setText(credit + "");
            } else if (bet != 1) {
                credit -= 1;
                jLCreditA.setText(credit + "");
            }
            bet = 1;
            jLBetA.setText(1 + "");
        } else {
            JOptionPane.showMessageDialog(this, "Not enough credit");
        }
    }//GEN-LAST:event_jBBetOneActionPerformed

    private void jBBetMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBetMaxActionPerformed
        if (credit >= 3) {
            if (bet == 1) {
                credit -= 2;
                jLCreditA.setText(credit + "");
            } else if (bet != 3) {
                credit -= 3;
                jLCreditA.setText(credit + "");
            }
            bet = 3;
            jLBetA.setText(3 + "");
        } else {
            JOptionPane.showMessageDialog(this, "Not enough credit");
        }
    }//GEN-LAST:event_jBBetMaxActionPerformed

    private void jBAddCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddCoinActionPerformed

        credit++;
        jLCreditA.setText(credit + "");
    }//GEN-LAST:event_jBAddCoinActionPerformed

    private void jBResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResetActionPerformed
        resetReels();
    }//GEN-LAST:event_jBResetActionPerformed

    private void jBStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStatActionPerformed

        JOptionPane.showMessageDialog(this, "<html><table><tr><td>Wins</td><td>: " + wins + "</td></tr><tr><td>Losses</td><td>: " + losses + "</td></tr><tr><td>Avg. Credits</td><td>: " + credit + "</td></tr></table></html>");
        try {
            PrintWriter writer = new PrintWriter("Statictics.txt", "UTF-8");
            writer.println("Wins \t\t: "+wins);
            writer.println("Losses \t\t: "+losses);
            writer.println("Avg. Credits \t: "+credit);
            writer.close();
        } catch (IOException e) {
            // do something
        }
    }//GEN-LAST:event_jBStatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddCoin;
    private javax.swing.JButton jBBetMax;
    private javax.swing.JButton jBBetOne;
    private javax.swing.JButton jBReset;
    private javax.swing.JButton jBSpin;
    private javax.swing.JButton jBStat;
    private javax.swing.JLabel jLBetA;
    private javax.swing.JLabel jLBetArea;
    private javax.swing.JLabel jLCreditA;
    private javax.swing.JLabel jLCreditArea;
    private javax.swing.JButton reel1;
    private javax.swing.JButton reel2;
    private javax.swing.JButton reel3;
    // End of variables declaration//GEN-END:variables

    private void resetReels() {
        Reel reel = new Reel();
        ArrayList<Symbol> spin = reel.spin();
        reel1.setIcon(spin.get(0).getImage());
        reel2.setIcon(spin.get(0).getImage());
        reel3.setIcon(spin.get(0).getImage());

        toSpinReel = true;
        isNotSpin = true;
        is1stBetOne = true;
        is1stBetMax = true;
        credit = 10;
        bet = 0;
        jLCreditA.setText(credit + "");
        jLBetA.setText(bet + "");
        jLCreditA.setText(credit + "");
    }

    private void stopSpin() {
        if (!isNotSpin) {
            toSpinReel = false;
            isNotSpin = true;
            if (reel1Val != 0 && reel2Val != 0 && reel3Val != 0 && reel1Val == reel2Val && reel2Val == reel3Val && bet != 0) {
                credit += (reel1Val * bet);
                jLCreditA.setText(credit + "");
                JOptionPane.showMessageDialog(this, "You Won!");
                wins += 1;
            } else if (reel1Val != 0 && reel2Val != 0 && reel3Val != 0) {
                losses += 1;
            }
            bet = 0;
            jLBetA.setText(bet + "");
        }
    }
}
